import sys, random, math
import numpy as np
from math import cos, exp, pi

NUM_MOTORS = 2
NUM_DIMENSIONS = 50

def mean_exp(state):
	return sum(map(lambda x: exp(x), state))/1.0*len(state)

class World(object):
	state_size=NUM_DIMENSIONS
	action_size=NUM_MOTORS

	def __init__(self):
		#Create world data structures 
		self.s =  [random.uniform(0,1) for i in range(NUM_DIMENSIONS)]    #CURRENT STATE 
		self.stp1 =  [random.uniform(0,1) for i in range(NUM_DIMENSIONS)] #TEMPORARY STATE.
		self.masks = self.initialise_masks()

	def resetState(self):
		self.s =  [random.uniform(0,1) for i in range(NUM_DIMENSIONS)]    #CURRENT STATE 
		return self.s

	def updateState(self, m):
		#Update each state in this weird and impenetrable manner. 
		self.s = self.stp1[:]
		state = np.array(self.s[:])

		self.stp1[0] =  cos(m[0]*5*pi)
		self.stp1[1] =  (self.s[0]+self.s[1])/2
		self.stp1[2] =  cos(self.s[0]*pi)
		self.stp1[3] =  cos(m[0]*2*pi)* cos(m[1]*2*pi)
		self.stp1[4] =  mean_exp(10*(state-1)) + mean_exp(10*(-state-1))/2
		self.stp1[5] =  ((m[0]+m[1])/2)**2
		self.stp1[6] =  0.5
		self.stp1[7] =  exp(5*(self.s[3]-1))
		self.stp1[8] =  2*exp(-(m[0]-0.5)**(2/(2*10**-1)))-1
		self.stp1[9] =  exp(-(m[0]-0.7)**(2/(2*10**-3)))-exp(-(m[1]-0.4)**(2/(2*10**-2)))
		self.stp1[10] =  cos(m[0]*5*pi)
		self.stp1[11] =  (self.s[10]+self.s[11])/2
		self.stp1[12] =  cos(self.s[10]*pi)
		self.stp1[13] =  cos(m[0]*2*pi)* cos(m[1]*2*pi)
		self.stp1[14] =  mean_exp(15*(state-1)) + mean_exp(15*(-state-1))/2
		self.stp1[15] =  ((m[0]+m[1])/2)**2
		self.stp1[16] =  0.5
		self.stp1[17] =  exp(7*(self.s[13]-1))
		self.stp1[18] =  2*exp(-(m[0]-0.5)**(2/(2*10**-2)))-1
		self.stp1[19] =  exp(-(m[0]-0.7)**(2/(2*10**-3)))- exp(-(m[1]-0.1)**(2/(2*10**-4)))
		self.stp1[20] =  cos(m[0]*5*pi)
		self.stp1[21] =  (self.s[20]+self.s[21])/2
		self.stp1[22] =  cos(self.s[20]*pi)
		self.stp1[23] =  cos(m[0]*2*pi)* cos(m[1]*2*pi)
		self.stp1[24] =  mean_exp(5*(state-1))+mean_exp(5*(-state-1))/2
		self.stp1[25] =  ((m[0]+m[1])/2)**2
		self.stp1[26] =  1
		self.stp1[27] =  exp(2*(self.s[23]-1))
		self.stp1[28] =  2*exp(-(m[0]-0.5)**(2/(2*10**-2)))-1
		self.stp1[29] =  exp(-(m[0]-0.7)**(2/(2*10**-3)))-exp(-(m[1]-0.1)**(2/(2*10**-4)))
		self.stp1[30] =  cos(m[0]*5*pi)
		self.stp1[31] =  (self.s[30]+self.s[31])/2
		self.stp1[32] =  cos(self.s[0]*pi)
		self.stp1[33] =  cos(m[0]*2*pi)*cos(m[1]*2*pi)
		self.stp1[34] =  mean_exp(20*(state-1))+mean_exp(20*(-state-1))/2
		self.stp1[35] =  ((m[0]+m[1])/2)**2
		self.stp1[36] =  0.1
		self.stp1[37] =  exp(10*(self.s[33]-1))
		self.stp1[38] =  2*exp(-(m[0]-0.5)**(2/(2*10**-2)))-1
		self.stp1[39] =  exp(-(m[0]-0.7)**(2/(2*10**-3)))-exp(-(m[1]-0.1)**(2/(2*10**-4)))
		self.stp1[40] =  cos(m[0]*5*pi)
		self.stp1[41] =  (self.s[0]+self.s[1])/2
		self.stp1[42] =  cos(self.s[0]*pi)
		self.stp1[43] =  cos(m[0]*2*pi)*cos(m[1]*2*pi)
		self.stp1[44] =  mean_exp(2*(state-1))+mean_exp(2*(-state-1))/2
		self.stp1[45] =  ((m[0]+m[1])/2)**2
		self.stp1[46] =  0.5
		self.stp1[47] =  exp(10*(self.s[43]-1))
		self.stp1[48] =  2*exp(-(m[0]-0.5)**(2/(2*10**-2)))-1
		self.stp1[49] = exp(-(m[0]-0.7)**(2/(2*10**-3)))-exp(-(m[1]-0.1)**(2/(2*10**-4)))
		return self.stp1

	def initialise_masks(self):
		masks = [[0 for x in xrange(self.state_size+self.action_size)] for y in xrange(self.state_size)]
		M0 = self.state_size
		M1 = M0+1
		nonzero_inputs = [[M0],     #0
						  [0, 1],   #1
						  [0],      #2
						  [M0, M1], #3
						  [M0, M1], #4
						  [M0, M1], #5
						  [],       #6
						  [0, M1],  #7
						  [M0],     #8
						  [M0, M1], #9
						  [M0],     #10
						  [10, 13], #11
						  [14],     #12
						  [M0, M1], #13
						  [M0, M1], #14
						  [M0, M1], #15
						  [],       #16
						  [1, 10],  #17
						  [M0],     #18
						  [M0, M1], #19
						  [M0],     #20
						  [20, 23], #21
						  [24],     #22
						  [M0, M1], #23
						  [M0, M1], #24
						  [M0, M1], #25 
						  [],       #26
						  [20, M1], #27
						  [M0],     #28
						  [M0, M1], #29
						  [M0],     #30
						  [30, 33], #31
						  [34],     #32
						  [M0, M1], #33
						  [M0, M1], #34
						  [M0, M1], #35
						  [],       #36
						  [30, M1], #37
						  [M0],     #38
						  [M0, M1], #39
						  [M0],     #40
						  [40, 43], #41
						  [44],     #42
						  [M0, M1], #43
						  [M0, M1], #44
						  [M0, M1], #45
						  [],       #46
						  [40, M1], #47
						  [M0],     #48
						  [M0, M1]] #49
		assert len(nonzero_inputs) == self.state_size
		for i in xrange(self.state_size):
			nonzero = nonzero_inputs[i]
			for j in nonzero:
				masks[i][j] = 1
		return masks

	def input_masks(self):
		return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
				0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,]

	def getState(self):
		return self.s

	def getRandomMotor(self):
		return [random.uniform(0,1) for i in range(NUM_MOTORS)]
